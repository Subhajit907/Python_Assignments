1. Write a function that stutters a word as if someone is struggling to read it. The first two letters are repeated twice with an ellipsis ... and space after each, and then the word is pronounced with a question mark ?. Examples stutter('incredible') ➞ 'in... in... incredible?' stutter('enthusiastic') ➞ 'en... en... enthusiastic?' stutter('outstanding') ➞ 'ou... ou... outstanding?
   
Hint :- Assume all input is in lower case and at least two characters long.
Ans:
def stutter(word):
    first_two_letters = word[:2]
    return f"{first_two_letters}... {first_two_letters}... {word}?"

# Example usage
print(stutter('incredible'))       # Output: in... in... incredible?
print(stutter('enthusiastic'))     # Output: en... en... enthusiastic?
print(stutter('outstanding'))      # Output: ou... ou... outstanding?



2. Create a function that takes an angle in radians and returns the corresponding angle in degrees rounded to one decimal place.
Ans:
import math

def radians_to_degrees(angle_rad):
    angle_deg = math.degrees(angle_rad)
    rounded_angle_deg = round(angle_deg, 1)
    return rounded_angle_deg

# Example usage
print(radians_to_degrees(math.pi))     # Output: 180.0
print(radians_to_degrees(math.pi/2))   # Output: 90.0
print(radians_to_degrees(math.pi/4))   # Output: 45.0



3. In this challenge, establish if a given integer num is a Curzon number. If 1 plus 2 elevated to num is exactly divisible by 1 plus 2 multiplied by num, then num is a Curzon number. Given a non-negative integer num, implement a function that returns True if num is a Curzon number, or False otherwise.
Ans:
def checkIfCurzonNumber(N):

	powerTerm, productTerm = 0, 0

	# Find 2^N + 1
	powerTerm = pow(2, N) + 1

	# Find 2*N + 1
	productTerm = 2 * N + 1

	# Check for divisibility
	if (powerTerm % productTerm == 0):
		print("Yes")
	else:
		print("No")

# Driver code
if __name__ == '__main__':
	
	N = 5
	checkIfCurzonNumber(N)

	N = 10
	checkIfCurzonNumber(N)
  

4. Given the side length x find the area of a hexagon.
Ans:
import math

def calculate_hexagon_area(x):
    area = (3 * math.sqrt(3) * x**2) / 2
    return area

# Example usage
side_length = 5
hexagon_area = calculate_hexagon_area(side_length)
print("The area of the hexagon is:", hexagon_area)



5. Create a function that returns a base-2 (binary) representation of a base-10 (decimal) string number. To convert is simple: ((2) means base-2 and (10) means base-10) 010101001(2) = 1 + 8 + 32 + 128.
Ans:
def decimal_to_binary(decimal_number):
    decimal_number = int(decimal_number)
    binary_number = bin(decimal_number)[2:]  # Remove the '0b' prefix
    return binary_number

# Example usage
decimal_number = "170"
binary_number = decimal_to_binary(decimal_number)
print("Binary representation:", binary_number)

   
   
